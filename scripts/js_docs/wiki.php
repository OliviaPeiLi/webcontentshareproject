<?php
class Wiki {
	private $files = array();
	private $output = '';
	
	public function __construct($files) {
		$this->files = $files;
		$this->output("====== JS Modules documentation ======");
		$this->output("These are autogenerated js docs. Do not update anything here they will be overwritten");
		$this->output("on deploy. If you want to change something do it in the code.");
		$this->output("  autogenerated by: /scripts/js_docs/js_docs.php");
	}
	
	private function output($row) {
		$this->output .= $row."\n\n";
	}
	
	private function list_item($item, $indent=0) {
		$indent_str = "  ";
		for($i=0;$i<$indent;$i++) $indent_str .= "  ";
		$this->output .= $indent_str."* ".$item."\n";
	}
	private function ordered_item($item, $indent=0) {
		$indent_str = "  ";
		for($i=0;$i<$indent;$i++) $indent_str .= "  ";
		$this->output .= $indent_str."- ".$item."\n";
	}
	
	
	/**
	 * Updates the wiki page
	 * @link http://tools.fantoon.com/dokuwiki/doku.php?id=js
	 * @param (String) $data
	 */
	public function send() {
		$ch = curl_init(); 
		curl_setopt($ch, CURLOPT_URL, "http://tools.fantoon.com/dokuwiki/api.php"); 
		curl_setopt($ch, CURLOPT_HEADER, 0); 
		curl_setopt($ch, CURLOPT_POST, 1); 
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); 
		curl_setopt($ch, CURLOPT_POSTFIELDS, array('data'=>$this->output)); 
		curl_setopt($ch, CURLOPT_HTTPHEADER, array("Authorization: Basic cmFkaWw6MHBlbmJ1MWxkMW45cw=="));
	
		$contents = curl_exec($ch); 
		if(!curl_errno($ch)){ 
			$info = curl_getinfo($ch);
			echo $contents."\r\n";
		} else { 
			echo 'Curl error: ' . curl_error($ch);
		}
		return $this;
	}
	
	public function render() {
		foreach ($this->files as $module=>$contents) {
			$this->output("===== ".strtoupper($module)." =====");
			foreach ($contents as $js_file => $data) {
				$this->output("==== $js_file ====");
				$this->rend_file($data);
			}
		}
		return $this;
	}
	
	public function rend_file($data) {
		$this->output("  Location: ".$data['location']);
		foreach($data['links'] as $link) {
			$this->output("[[http://test.fandrop.com$link|$link]]");
		}
		$this->output($data['overview']);
		$this->add_dependencies($data['dependencies']);
		$this->add_vars($data['vars']);
		$this->add_functions($data['functions']);
		$this->add_events($data['events']);
	}
	
	private function add_dependencies($deps) {
		if (!$deps) return ;
		$this->output('**Dependencies:**');
		foreach ($deps as $dep=>$overview) {
			if (strpos($dep, 'common/') !== false || strpos($dep, 'plugins/') !== false) {
				$dep_url = strtolower(str_replace(array(' ','common/','plugins/'), array('_','',''), $dep));
				$this->list_item("[[ui_components#$dep_url|$dep]] - $overview");
			} else {
				list($dep_url,) = explode('/', $dep);
				$this->list_item("[[#$dep_url|$dep]] - $overview");
			}
		}
	}
	
	private function add_vars($vars) {
		if (!$vars) return ;
		$this->output("=== Variables ===");
		if (isset($vars['private'])) {
			foreach ($vars['private'] as $var=>$data) {
				$this->output("**$var** ".($data['default'] ? '= '.$data['default'] : '').$data['overview']);
			}
		}
		if (isset($vars['public'])) {
			foreach ($vars['public'] as $var=>$data) {
				$this->output("**$var** ".($data['default'] ? '= '.$data['default'] : '').$data['overview']);
			}
		}
	}
	
	private function add_functions($funcs) {
		if (!$funcs) return ;
		$this->output("=== Functions ===");
		if (isset($funcs['private'])) {
			foreach ($funcs['private'] as $func=>$data) {
				$this->output("**$func** (private) - ".$data['overview']);
				foreach ($data['data'] as $key=>$val) {
					$this->list_item("//@$key// - $val", 1);
				}
				foreach ($data['params'] as $param=>$description) {
					$this->list_item("**//$param//** - $description", 1);
				}
			}
		}
		if (isset($funcs['public'])) {
			foreach ($funcs['public'] as $func=>$data) {
				$this->output("**$func** (public) - ".$data['overview']);
				foreach ($data['data'] as $key=>$val) {
					$this->list_item("//@$key// - $val", 1);
				}
				foreach ($data['params'] as $param=>$description) {
					$this->list_item("**//$param//** - $description", 1);
				}
			}
		}
	}
	
	private function add_events($events) {
		if (!$events) return ;
		$this->output("=== Events ===");
		foreach ($events as $selector=>$events) {
			if (strpos($selector, '"') !== false) {
				$selector = preg_replace('#"([^"]*)"#', "'<color blue>$1</color>'", $selector);
			} elseif (strpos($selector, "'") !== false) {
				$selector = preg_replace("#'([^']*)'#", "'<color blue>$1</color>'", $selector);
			}
			$this->output("**$selector**");
			foreach ($events as $event=>$data) {
				$event = preg_replace("#'([^']*)'#", "'<color blue>$1</color>'", $event);
				$this->list_item("**//$event//** - {$data['overview']}", 1);
				foreach ($data['data'] as $key=>$val) {
					$this->list_item("//@$key// - $val", 1);
				}
			}
		}
	}
	
}